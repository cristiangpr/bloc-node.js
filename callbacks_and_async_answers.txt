Questions

1. What is the difference between readdirSync and readdir?

A: readdir is asynchronous and non blocking whiile readdirSync is synchronous and blocking.

2. What is the event loop and how does it handle asynchronous requests?

A:  A system for precessing tasks sequentially. It handles asychronous requests by asking the operating system to notify it when the request is ready for processing while it continues to process other tasks.

3. Given the following code, specify whether the program is asynchronous and non-blocking or synchronous and blocking or synchronous and non-blocking.

const fs = require('fs');
const file = fs.readFileSync('foo.txt');
console.log(file.toString());

A: Sychronous and blocking

4. Given the following code, specify whether the program is asynchronous and non-blocking or synchronous and blocking or synchronous and non-blocking.

const fs = require('fs');
fs.readFile('foo.txt', (err, file) => {
 if (err) throw err;
 console.log(file.toString());
});
console.log("test");

A: asychronous non blocking

5. In what order will the console.log statements execute in the code below?

const fs = require('fs');
fs.readFile('foo.txt', (err, file) => {
 if (err) throw err;
 console.log("A");
 console.log("B")
});
console.log("C");

A: C, A, B

6. setTimeout is a JavaScript function which calls a function after a set amount of milliseconds. Given the following code, explain in what sequence the functions will run and why.

function greeting() {
 setTimeout(() => {
   console.log("friend");
 }, 100);
}

function hello(){
 console.log("hello");
}

greeting();
hello();

A: greeting will begin running first but since it has to wait 100 milliseconds to console.log "friend" hello will finish and return first, so the console will read "hello friend"

7. Create a function which utilizes a callback. Make sure to add console.log statements to understand when your callback function is called.

A: downloadFile('http://files.com/file.txt', handleFile)

function handleFile(error, file) {
  if (error) console.error('Download error!', error)
  else console.log('Download finished', file)
}

console.log('Download started')